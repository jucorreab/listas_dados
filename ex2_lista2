//Escreva uma função em C que realize uma busca sequencial em uma matriz bidimensional de inteiros para encontrar um valor específico fornecido pelo usuário. 
//A função deve retornar a posição da primeira ocorrência do valor ou informar que o valor não foi encontrado.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include<locale.h>

void trocar(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void ordenarBolha(int array[], int tamanho) {
	int i;
	int j;
    for (i = 0; i < tamanho - 1; i++) {
        for (j = 0; j < tamanho - i - 1; j++) {
            if (array[j] > array[j + 1]) {
                trocar(&array[j], &array[j + 1]);
            }
        }
    }
}

int particionar(int array[], int esquerda, int direita) {
    int pivo = array[direita];
    int i = (esquerda - 1);
    int j;

    for (j = esquerda; j <= direita - 1; j++) {
        if (array[j] < pivo) {
            i++;
            trocar(&array[i], &array[j]);
        }
    }
    trocar(&array[i + 1], &array[direita]);
    return (i + 1);
}

void quicksort(int array[], int esquerda, int direita) {
	int indicePivo;
    if (esquerda < direita) {
        indicePivo = particionar(array, esquerda, direita);
        quicksort(array, esquerda, indicePivo - 1);
        quicksort(array, indicePivo + 1, direita);
    }
}

void merge(int array[], int esquerda, int meio, int direita) {
    int i, j, k;
    int tamanho1 = meio - esquerda + 1;
    int tamanho2 = direita - meio;

    int L[tamanho1], R[tamanho2];

    for (i = 0; i < tamanho1; i++)
        L[i] = array[esquerda + i];
    for (j = 0; j < tamanho2; j++)
        R[j] = array[meio + 1 + j];

    i = 0;
    j = 0;
    k = esquerda;
    while (i < tamanho1 && j < tamanho2) {
        if (L[i] <= R[j]) {
            array[k] = L[i];
            i++;
        } else {
            array[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < tamanho1) {
        array[k] = L[i];
        i++;
        k++;
    }

    while (j < tamanho2) {
        array[k] = R[j];
        j++;
        k++;
    }
}

void mergesort(int array[], int esquerda, int direita) {
    if (esquerda < direita) {
        int meio = esquerda + (direita - esquerda) / 2;
        mergesort(array, esquerda, meio);
        mergesort(array, meio + 1, direita);
        merge(array, esquerda, meio, direita);
    }
}

int main() {
	setlocale(LC_ALL, "Portuguese");
    int tamanho1 = 1000; 
    int tamanho2 = 10000; 

    int *array1 = (int *)malloc(sizeof(int) * tamanho1);
    int *array2 = (int *)malloc(sizeof(int) * tamanho2);
    
    clock_t inicio = clock();
    ordenarBolha(array1, tamanho1);
    clock_t fim = clock();
    double tempoDecorrido = (double)(fim - inicio) / CLOCKS_PER_SEC;
    printf("Tempo de execução do Bubble Sort para tamanho %d: %lf segundos\n", tamanho1, tempoDecorrido);

    inicio = clock();
    quicksort(array2, 0, tamanho2 - 1);
    fim = clock();
    tempoDecorrido = (double)(fim - inicio) / CLOCKS_PER_SEC;
    printf("Tempo de execução do Quicksort para tamanho %d: %lf segundos\n", tamanho2, tempoDecorrido);

    free(array1);
    free(array2);

    return 0;
}
